# -*- coding: utf-8 -*-
"""3B-CABREZA-MP3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGlR5mImrvvyHG698Kjou2-f_cowY1zs

Machine Problem: Interactive Probability and Decision-Making in AI

Part 1: Implement Basic Probability Calculations
"""

def joint_probability(p_a, p_b):
    return p_a * p_b

def marginal_probability(p_joint_a_b, p_joint_a_not_b):
    return p_joint_a_b + p_joint_a_not_b

def conditional_probability(p_a_and_b, p_b):
    if p_b == 0:
        return "Conditional probability undefined (P(B) cannot be zero)"
    return p_a_and_b / p_b

def get_user_input():
    print("Enter probabilities for independent events A and B.")

    p_a = float(input("Enter P(A): "))
    p_b = float(input("Enter P(B): "))

    print("\nEnter joint probabilities for P(A and B) and P(A and not B).")
    p_a_and_b = float(input("Enter P(A and B): "))
    p_a_and_not_b = float(input("Enter P(A and not B): "))

    joint_prob = joint_probability(p_a, p_b)
    marginal_prob = marginal_probability(p_a_and_b, p_a_and_not_b)
    conditional_prob = conditional_probability(p_a_and_b, p_b)

    print(f"\nCalculated Joint Probability P(A and B): {joint_prob}")
    print(f"Calculated Marginal Probability P(A): {marginal_prob}")
    print(f"Calculated Conditional Probability P(A|B): {conditional_prob}")

get_user_input()

"""Part 2: Bayesian Inference for Real-World Scenarios"""

def bayesian_inference(prior, likelihood, evidence):
    return (likelihood * prior) / evidence

def get_user_input():
    print("Bayesian Inference: Update probability based on a positive test result.")

    prior = float(input("Enter the prior probability of having the disease (P(Disease)): "))
    likelihood = float(input("Enter the likelihood of a positive test given the disease (P(Pos Test | Disease)): "))
    evidence = float(input("Enter the overall probability of a positive test (P(Pos Test)): "))

    posterior = bayesian_inference(prior, likelihood, evidence)

    print(f"\nPosterior Probability of having the disease after a positive test result: {posterior}")

get_user_input()

"""Part 3: Simulate Decision-Making Under Uncertainty

"""

import random

def decision_simulation(prob_success, reward, penalty, trials):
    total_return = 0
    for _ in range(trials):
        if random.random() < prob_success:
            total_return += reward
        else:
            total_return -= penalty
    return total_return / trials

def get_user_input():
    print("Decision-making simulation under uncertainty.")

    prob_success = float(input("Enter the probability of success (0 to 1): "))
    reward = float(input("Enter the reward amount for success: "))
    penalty = float(input("Enter the penalty for failure: "))
    trials = int(input("Enter the number of trials: "))

    average_return = decision_simulation(prob_success, reward, penalty, trials)

    print(f"\nAverage return after {trials} trials: {average_return}")

get_user_input()

"""Part 4: Visualize Probability Distributions"""

import numpy as np
import matplotlib.pyplot as plt

def binomial_distribution(trials, probability, simulations):
    data = np.random.binomial(trials, probability, simulations)
    plt.hist(data, bins=range(trials+2), edgecolor='black', alpha=0.7)
    plt.title('Binomial Distribution (Coin Flips / Dice Rolls)')
    plt.xlabel('Number of Successes')
    plt.ylabel('Frequency')
    plt.show()

def normal_distribution(mean, std_dev, simulations):
    data = np.random.normal(mean, std_dev, simulations)
    plt.hist(data, bins=30, edgecolor='black', alpha=0.7)
    plt.title('Normal Distribution (Exam Scores)')
    plt.xlabel('Values')
    plt.ylabel('Frequency')
    plt.show()

def get_user_input():
    print("Choose a distribution to simulate:")
    print("1. Binomial Distribution (e.g., Coin Flips)")
    print("2. Normal Distribution (e.g., Exam Scores)")

    choice = int(input("Enter 1 or 2: "))

    if choice == 1:
        trials = int(input("Enter number of trials (e.g., coin flips): "))
        probability = float(input("Enter probability of success (e.g., 0.5 for coin flip): "))
        simulations = int(input("Enter number of simulations: "))
        binomial_distribution(trials, probability, simulations)

    elif choice == 2:
        mean = float(input("Enter the mean (e.g., average exam score): "))
        std_dev = float(input("Enter the standard deviation: "))
        simulations = int(input("Enter number of simulations: "))
        normal_distribution(mean, std_dev, simulations)

    else:
        print("Invalid choice. Please enter 1 or 2.")

get_user_input()

"""Part 5: Real-World Scenario Prediction"""

def predict_rain(humidity, cloud_cover):
    prior_rain = 0.3
    likelihood_humidity_given_rain = 0.8
    likelihood_cloud_given_rain = 0.9
    prior_no_rain = 1 - prior_rain
    likelihood_humidity_given_no_rain = 0.4
    likelihood_cloud_given_no_rain = 0.3
    total_humidity = likelihood_humidity_given_rain * prior_rain + likelihood_humidity_given_no_rain * prior_no_rain
    total_cloud_cover = likelihood_cloud_given_rain * prior_rain + likelihood_cloud_given_no_rain * prior_no_rain
    posterior_rain = (likelihood_humidity_given_rain * likelihood_cloud_given_rain * prior_rain) / (total_humidity * total_cloud_cover)
    return posterior_rain

def get_user_input():
    print("Rain Prediction based on Humidity and Cloud Cover.")
    humidity = float(input("Enter the humidity level (0 to 1): "))
    cloud_cover = float(input("Enter the cloud cover level (0 to 1): "))
    probability_rain = predict_rain(humidity, cloud_cover)
    print(f"\nProbability of rain based on the input values: {probability_rain * 100:.2f}%")

    if probability_rain > 0.5:
        print("It is likely to rain.")
    else:
        print("It is unlikely to rain.")

get_user_input()